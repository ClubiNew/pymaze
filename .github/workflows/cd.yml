name: CD

# Create new release without changes:
# git commit -m "[commit_message]" --allow-empty
# git tag [tag_name]
# git push origin [branch_name] --tags

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: "Release version"
        required: true
        type: string

jobs:
  version:
    name: Set version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Get version from commit tag
        if: github.event_name == 'push'
        run: echo "version=${GITHUB_REF#refs/tags/}" >> "$GITHUB_ENV"
      - name: Get version from dispatch
        if: github.event_name == 'workflow_dispatch'
        run: echo "version=${{ github.event.inputs.version }}" >> "$GITHUB_ENV"
      - name: Set version
        id: version
        run: echo "version=${{ env.version }}" >> $GITHUB_OUTPUT

  build:
    name: Build
    needs: version
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [ubuntu, windows, macos]
        include:
          - extension: ""
          - extension: .exe
            os: windows
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Python interpreter
        uses: actions/setup-python@v4
        with:
          python-version: "3.10.7"
          cache: "pip"
      - name: Install packages
        run: pip install -r requirements.txt
      - name: Build
        run: pyinstaller -F -n pymaze-${{ needs.version.outputs.version }}-${{ matrix.os }} pymaze.py
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}
          path: dist/pymaze-*

  draft-release:
    name: Draft release
    runs-on: ubuntu-latest
    needs:
      - version
      - build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          name: pymaze ${{ needs.version.outputs.version }}
          tag_name: ${{ needs.version.outputs.version }}
          token: ${{ SECRETS.GITHUB_TOKEN }}
          fail_on_unmatched_files: true
          files: ./*/pymaze-*
          draft: true
